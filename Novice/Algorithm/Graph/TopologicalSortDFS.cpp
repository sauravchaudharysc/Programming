//Topological Sorting Using DFS
/*This algorithm output of linear ordering of vertices.
Such that for every edge u-->v vertex u comes before vertex v in the 
ordering.It works on only Directed Acyclic Graph*/
//Complexity
/*
linear 0(V+E)*/
//Applications
/*
1.Finding out possible sequence to finish task
2.Installing of packages in a Linux System,all dependencies are installed first
in the order generated by topological sort*/


#include<iostream>
#include<map>
#include<list>
#include<queue>
#include<climits>
using namespace std;
//Syntax For Creating a template.
template<typename T>
//A Class for graph
class Graph{
//A Map which maps every vertices to its adjacent vertices
  map<T,list<T>> adjList; //Array of linked list
  public:
    Graph(){
        
    }
    //In bidirectional if vertex 1 is connected to 0. Then 0 is also connected to 1.
    void addEdge(T u,T v,bool bidir=true){
        adjList[u].push_back(v);
        if(bidir){
            adjList[v].push_back(u);
        }
    }
    void print(){
        //Iterate the map
        for(auto obj: adjList){
            cout<<obj.first<<" -> ";
            //obj.second is linked list
            for(auto entry:obj.second){
                cout<<entry<<" ,";
            }
            cout<<endl;
        }
    }
    void dfsHelper(T node,map<T,bool>&visited,list<T> &ordering){
        //Whenever you come to a node mark is visited
        visited[node] = true;
        //Try to find out if neighbour is visited or not
        //If not visited then visit it.
        for(T neighbour:adjList[node]){
            if(!visited[neighbour]){
                dfsHelper(neighbour,visited,ordering);
            }
        }
        //Add 1 line for topological Sorting
         //At this point all the children of current node has been visited
         ordering.push_front(node); //Push the node on head of linked list
    }
    void dfsTopologicalSort(){
        //Maintain a visited array
        map<T,bool>visited;
        //A list to maintain output
        list<T> ordering;
        for(auto i:adjList){
            //i is pair of node followed by list of nodes
            T node = i.first;
            if(!visited[node]){
                dfsHelper(node,visited,ordering);
            }
        }
        for(T element: ordering){
            cout<<element<<" -->";
        }
    }
};

int main()
{
    Graph<string> g2;
    g2.addEdge("English","Programming Logic",false);
    g2.addEdge("Maths","Programming Logic",false);
    g2.addEdge("Programming Logic","Html",false);
    g2.addEdge("Programming Logic","python",false);
    g2.addEdge("Programming Logic","java",false);
    g2.addEdge("Programming Logic","C++",false);
    g2.dfsTopologicalSort();
    
}