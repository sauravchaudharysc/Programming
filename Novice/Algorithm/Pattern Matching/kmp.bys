/*KMP Algorithm*/O(n+m)
It is a modification of Rabin Karp's Algorithm.
String :- ABAABCXABCXABXA
Pattern :- ABCXABX
In case of Rabin Karp we start comparsion from the index 0 of string and 0 of pattern.If there is 
a match we increase i and j. If at any point of time if there is mismatch we initialise j=0 and 
i=i+1. And we perform the same step again. But this turns out to be a expensive approach in terms
of Time Complexity.
                   Suppose at any point of time i reaches 3. Here,
                    str[3]=pat[0],str[4]=pat[1],str[5]=pat[2],str[6]=pat[3]
                    str[7]=pat[4],str[8]=pat[5],str[9]!=pat[6]
                    So the next iteration will start from 4. 
                    So Complexity = O(n.m)
                    
So KMP Algorithm will make sure that we arent recomputing any of the iteration we have done before.
For this we will create the reset table.In reset table at every index what is the length of longest
suffix present till now which is also present as prefix in the pattern.
![](KMP.png)</br>
1. No Recomputation
To avoid recomputatuon we create a reset table.
At every index we will store what is length of longest suffix present till now viz also present 
as a prefix in the pattern.

Steps:- 
1.KMPpreprocess
Here we create the reset table using the pattern.Take two pointer i,j.Initialise i=0 & j=-1.Iterate
till the length of the pattern.This table will store what is length of longest suffix present till now which is
also present as a prefix in the pattern.
  PseudoCode
      KMPpreprocess(patttern)	
	 i=0,j=-1,reset[0]=-1;
	 while(i<patternlength){
		while(j>=0 and pattern[i]!=pattern[j]){
			j=reset[j];
		}
	 }
	 i++;
	 j++;
	 reset[i]=j;
	 }
2.KMPsearch or Matching
 Here the main task occurs.We recieve here both the pattern and the string.We call the KMPpreprocess function and 
compute the reset table.With the help of reset table we perform our task.Here we simply iterate over the string
till there is no mismatch and if j reaches the value equal to pattern length print the index of i-j to get the 
pattern index.But if there occurs a mismatch we use the reset table and check if there is any prefix for the suffix
and begin the jth index from that position to avoid recomputation.
  PseudoCode
     KMPsearch(str,pat)
	 KMPpreprocess(pat);
  	   i=0,j=0;
           while(i<str.size()){
      		while(j >= 0 && str[i]!=pat[j]){
             		j=reset[j];
      		}
      		i++;
     	 	j++;
      		if(j==pat.size()){
         	 cout<<"Pattern is found at"<<i-j<<endl;
          	 j=reset[j];
      	        }
	   }


 