## Rehashing
Lets understand what is Rehashing and why it is needed.
Suppose you have a table of 10 buckets.And you insert 20 element then there is a chance
of collision. One way is to increase the table size as element increases.
<br>
So we can define a load factor.
### Load Factor = ratio of(CS/TS)
If Load Factor becomes greater than threshold(0.75) then this is the time to increase the bucket
size.So we are going to find the next prime number which is near to double of size of old 
hash table. All the previous element in the old table must be rehashed.

Steps Involved:-
    
    1. Calculate Load Factor. 
    {
        If LF>threshold {
            1.Create a new table of size 2*oldsize.
            2.Shift elements from old table to new table
            3.Delete old table.
        }
    }
    
We need to rehash everything because table size has changed.We cant extend once the table size is allocated.So we need to create a new table and rehash it.And this is going to be expensive operation.And it is atleast going to take time O(N).
## Rehashing
Lets understand what is Rehashing and why it is needed.
Suppose you have a table of 10 buckets.And you insert 20 element then there is a chance
of collision. One way is to increase the table size as element increases.
<br>
So we can define a load factor.
### Load Factor = ratio of(CS/TS)
If Load Factor becomes greater than threshold(0.75) then this is the time to increase the bucket
size.So we are going to find the next prime number which is near to double of size of old 
hash table. All the previous element in the old table must be rehashed.

Steps Involved:-
    
    1. Calculate Load Factor. 
    {
        If LF>threshold {
            1.Create a new table of size 2*oldsize.
            2.Shift elements from old table to new table
            3.Delete old table.
        }
    }
    
We need to rehash everything because table size has changed.We cant extend once the table size
is allocated.So we need to create a new table and rehash it.And this is going to be expensive
operation.And it is atleast going to take time O(N).

## Search 
Suppose you have a hash table and you are looking for berger and want to know it price.So you
have been given a key and you want to know the associated value with it.So key is Berger.So
using the HASH Function we get the index of node. We traverse the node and search for the key.
In case if the item is not found then we will return a pointer which will point to NULL.

## Operator Overloading
Here we will see operator overloading to make our hash table work easier.
<br>
//Insert
price_menu["Dosa"]  = 60;
<br>
//Update
price_menu["Dosa"] += 10;
<br>
//Search
cout<<price_menu["Dosa"]<<endl;
<br>

I want to support these three operation in hash table.<br>
### What operators to overload and how ??<br>
First we check is the key is present or not. If not we simply create the new node where Dosa is
the key and some random garbage as the value.This node is returned by reference.<br>
The node is of data-type T. So to return it by reference we use &.If we dont use & it will return
the copy of T and value cant be updated.<br>
<br>
check operatoverload.cpp


